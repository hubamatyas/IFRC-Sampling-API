@startuml

skin rose

title Relationships - Class Diagram


class SimpleRandom {
  +margin_of_error: int
  + confidence_level: int
  + individuals: int
  + households: int
  + non_response_rate: int
  + subgroups: list
  + sample_size: int
  + population_size: int

  + __init__(margin_of_error: int, confidence_level: int, individuals: int, households: int, non_response_rate: int, subgroups: list)
    + check_inputs(margin_of_error: int, confidence_level: int, individuals: int, households: int, non_response_rate: int, subgroups: list) : None
    + validate_inputs() : None
    + start_calculation() : None
    + calculate_sample_size(population_size: int, margin_of_error: int, confidence_level: int, non_response_rate: int) : dict
    + calculate_subgroup_sample_sizes(margin_of_error: int, confidence_level: int, non_response_rate: int, subgroups: list) : dict
    + get_sample_size() : int
}

class SystematicRandom {
    + intervals: dict

    + __init__(margin_of_error: int, confidence_level: int, individuals: int, households: int, non_response_rate: int, subgroups: list)
    + start_calculation(): None
    + get_intervals() : dict
}
class TimeLocation {
    + locations: int
    + days: int
    + interviews_per_session: int
    + units: list
    + __init__( margin_of_error: int, confidence_level: int, individuals: int, households: int, non_response_rate: int, subgroups: list, locations: int, days: int, interviews_per_session: int)
    + validate_inputs() : None
    + generate_time_location_combinations( locations: int, days: int) : list
    + select_random_units( time_location_units: list) : list
    + generate_dict_of_selected_subset(selected_subset:list) : dict
    + generate_desired_result( output_dict: dict) : list
    + start_calculation() : None
    + get_units() : list
}
class ClusterRandom {
  + communities : list
  + clusters : list

  + __init__(margin_of_error: int, confidence_level: int, individuals: int, households: int, non_response_rate: int, subgroups:list, communities:list)
  + community_sample_sizes_calculation():dict
  + assign_number_of_clusters(communities:list, community_sample_sizes:dict,total_clusters:int):dict
  + assign_list_of_clusters(community_clusters:dict):dict
  + check_clusters() : None
  + start_calculation() : None
  + get_clusters():None
}

SimpleRandom <|-down- SystematicRandom: Inheritance
SimpleRandom <|-down- TimeLocation: Inheritance
SimpleRandom <|-down- ClusterRandom: Inheritance


@enduml